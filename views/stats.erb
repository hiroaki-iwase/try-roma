<html>
  <head>
    <title>Try Roma</title>
    <script src="https://fb.me/react-0.13.3.js"></script> <!-- toDO download library-->
    <script src="https://fb.me/JSXTransformer-0.13.3.js"></script> <!-- toDO download library-->
    <script src="https://code.jquery.com/jquery-2.1.3.min.js"></script>  <!-- toDO download library-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/0.3.2/marked.min.js"></script> <!-- toDO download library-->
  </head>
  <body>

<!--
debug screen
<hr>

DELETE
<form method="post" action="/">
    command<input type="text" name="command"><br>
    confimation:<input type="text" name="confirmation"><br>
    <input type="hidden" name="_method" value="DELETE">
    <input type="submit" value="delete!!">
</form>

<hr>

POST<br>

<form method="post" action="/">
    Commad:<input type="text" name="command"><br>
    Key:<input type="text" name="key"><br>
    exptime<input type="text" name="exptime"><br>
    bytes<input type="text" name="bytes"><br>
    CASid<input type="text" name="casid"><br>
    value<input type="text" name="value"><br>
    <input type="text" name="size"><br>
    digit<input type="text" name="digit"><br>
<br>
    <input type="submit" value="Post!">
</form>
<br>

PUT
<form method="post" action="/">
    Command:<input type="text" name="command"><br>
    Bool:<input type="text" name="bool"><br>
    second:<input type="text" name="sec"><br>
    lost action:<input type="text" name="lost"><br>
    log level:<input type="text" name="level"><br>
    <input type="hidden" name="_method" value="PUT">
    <input type="submit" value="put!!">
</form>
-->

<!--
  response<br>
  <%#= h @res %>
  <%#= @res %>

-->

<hr><br>

<div id="reactArea" />

  <script type="text/jsx">
      var Test = React.createClass(
          {
              getInitialState() {
                  return {
                      explanation: "please input command",
                      cmd: "please input command",
                      result: ""
                  };
              },
              sendCommand(e) {
                  var ENTER = 13;
                  if(e.keyCode == ENTER){
                      switch (true) {
                          case /^(stat|stats|whoami|nodelist|version)$/.test(e.target.value) :
                              $.get("../"+RegExp.$1, function(res){
                                  this.setState({result: res});
                               }.bind(this));
                              break;
                          case /^(stat|stats|get|gets)\s(.+)$/.test(e.target.value) :
                              $.get("../"+RegExp.$1+"/"+RegExp.$2, function(res){
                                  this.setState({result: res});
                               }.bind(this));
                              break;
                          case /^(release|recover)$/.test(e.target.value) :
                              $.ajax({
                                  url: "../",
                                  type: 'PUT',
                                  data: {command: RegExp.$1},
                                  //datatype: ''.
                                  cache: false,
                              }).done(function(res){
                                  this.setState({result: res})
                              }.bind(this)).fail(function(){
                                  this.setState({result: 'API CONNECTION ERROR'})
                              }.bind(this));
                              break;

                          case /^(set_lost_action|set_log_level)\s(.+)$/.test(e.target.value) :
                              $.ajax({
                                  url: "../",
                                  type: 'PUT',
                                  data: {command: RegExp.$1, level: RegExp.$2, lost: RegExp.$2},
                                  //datatype: ''.
                                  cache: false,
                              }).done(function(res){
                                  this.setState({result: res})
                              }.bind(this)).fail(function(){
                                  this.setState({result: 'API CONNECTION ERROR'})
                              }.bind(this));
                              break;

                          case /^(set_auto_recover)\s([a-z]+)\s*([0-9]*)$/.test(e.target.value) :
                              $.ajax({
                                  url: "../",
                                  type: 'PUT',
                                  data: {command: RegExp.$1, bool: RegExp.$2, sec: RegExp.$3},
                                  //datatype: ''.
                                  cache: false,
                              }).done(function(res){
                                  this.setState({result: res})
                              }.bind(this)).fail(function(){
                                  this.setState({result: 'API CONNECTION ERROR'})
                              }.bind(this));
                              break;

                          case '':
                              this.setState({cmd: "please input command"});
                                  this.setState({result: ''});
                              break;
                          default:
                              this.setState({cmd: "No Support"});
                              this.setState({result: ''});
                              break;
                      }
                  }
              },
              render() {
                return (
                  <div>
                    <div>
                      Send Command is {this.state.cmd}
                    </div>
                    <input type="text" placeholder={this.state.cmd} onChange={this.changeText}  onKeyDown={this.sendCommand} />
                    <div>
                      result is<br />
                      {this.state.result}
                    </div>
                  </div>
                );
              }
          }
      );
      
      
      React.render(<Test />, document.getElementById("reactArea"));
    </script>

  </body>
</html>
