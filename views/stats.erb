<html>
  <head>
    <title>Try Roma</title>
    <script src="https://fb.me/react-0.13.3.js"></script> <!-- toDO download library-->
    <script src="https://fb.me/JSXTransformer-0.13.3.js"></script> <!-- toDO download library-->
    <script src="https://code.jquery.com/jquery-2.1.3.min.js"></script>  <!-- toDO download library-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/0.3.2/marked.min.js"></script> <!-- toDO download library-->
  </head>
  <body>

  <hr><br>

  <div id="reactArea" />

  <script type="text/jsx">

     //function sendQuery(action, cmd, bool) {
     //    $.ajax({
     //        url: "../",
     //        type: action,
     //        data: { command: cmd, confirmation: bool },
     //        cache: false,
     //    }).done(function(res){
     //        this.setState({result: res})
     //    }.bind(this)).fail(function(){
     //        this.setState({result: 'API Request was failed '})
     //    }.bind(this));

     //}


//function nextForm()
//{
//	if (event.keyCode == 13)
//	{
//		currentFNo++;
//		currentFNo %= document.myFORM.elements.length;
//		document.myFORM[currentFNo].focus();
//	}
//}
//window.document.onkeydown = nextForm;


//     function waitValue(action, cmd) {
//console.log('wait no cmd ='+ cmd);
//
////         if (document.onkeydown) {
////console.log('key was pushed');
////         } else {
////console.log('NOT pushed');
////         }
//
//         
//
//         document.onkeydown = function (e){
//             if (e.keyCode == 13) {
////console.log('Enter key was pushed');
//         //        setTimeout(function() { waitValue(action, cmd) }, 3000);
//               e.preventDefault();
//             } else {
////console.log('NOT Enter key was pushed');
//         //        //console.log(e.target.value);
//         //        $.ajax({
//         //            url: "../",
//         //            type: action,
//         //            //data: { command: cmd, confirmation: bool },
//         //            data: { command: cmd, confirmation: e.target.value },
//         //            cache: false,
//         //        }).done(function(res){
//         //            console.log(res);
//         //            //this.setState({result: res})
//         //        }).fail(function(){
//         //            console.log('fail');
//         //            //this.setState({result: 'API Request was failed '})
//         //        });
//             return true;
//             }
//         //};
//      
//         //setTimeout(function() { waitValue(action, cmd) }, 1000);
//console.log('return');
//     }

      var Test = React.createClass(
          {
              getInitialState() {
                  return {
                      explanation: "please input command",
                      cmd: "please input command",
                      result: ""
                  };
              },
              sendCommand(e) {
                  var ENTER = 13;
                  if(e.keyCode == ENTER){


                  if (window.sessionStorage.getItem(['requireNext'])) {
                      var lastcmd = window.sessionStorage.getItem(['lastcmd']);

                      switch (true) {
                          case /^(balse|shutdown|shutdown_self)$/.test(lastcmd):
                              $.ajax({
                                   url: "../",
                                   type: 'DELETE',
                                   data: { command: lastcmd, confirmation: e.target.value },
                                   cache: false,
                              }).done(function(res){
                                   this.setState({explanation: res})
                              }.bind(this)).fail(function(){
                                   this.setState({result: 'API Request was failed '})
                              }.bind(this));
                              break;
                      }
                
                      window.sessionStorage.removeItem(['requireNext']);
                  }








                      window.sessionStorage.setItem(['lastcmd'],[e.target.value]);
                      switch (true) {
                          // GET =========================================================================
                          case /^(stat|stats|whoami|nodelist|version)$/.test(e.target.value) :
                              $.get("../"+RegExp.$1, function(res){
                                  this.setState({result: res});
                               }.bind(this));
                              break;

                          case /^(stat|stats|get|gets)\s(.+)$/.test(e.target.value) :
                              $.get("../"+RegExp.$1+"/"+RegExp.$2, function(res){
                                  this.setState({result: res});
                               }.bind(this));
                              break;


                          // DELETE =========================================================================
                          case /^(balse|shutdown|shutdown_self|rbalse)\s*([a-z]*)$/.test(e.target.value) :
                              var cmd = RegExp.$1;
                              $.ajax({
                                   url: "../",
                                   type: 'DELETE',
                                   data: { command: RegExp.$1, confirmation: RegExp.$2 },
                                   cache: false,
                              }).done(function(res){
                                   this.setState({explanation: res})
                              }.bind(this)).fail(function(){
                                   this.setState({result: 'API Request was failed '})
                              }.bind(this));
                              
                              // require next line!!
                              if (/^(balse|shutdown|shutdown_self)$/.test(cmd)) {
                                  window.sessionStorage.setItem(['requireNext'],[true]);
                                  //var cmd = e.target.value;
                                  //setTimeout(function() { waitValue('DELETE', cmd) }, 1000);
                              }
                              break;

                          // POST =========================================================================
                          //case /^(set|add|replace|append|prepend)\s([^\s]+)\s0\s([0-9]+)\s([0-9]+)$/.test(e.target.value) :
                          //    cmd = RegExp.$1;
                          //    key = RegExp.$2;
                          //    exptime = RegExp.$3;
                          //    bytes = RegExp.$4;
                          //    this.setState({explanation: 'Please input Value'});
 

                          //    $.ajax({
                          //        url: "../",
                          //        type: 'POST',
                          //        //data: { command: RegExp.$1, key: RegExp.$2, exptime: RegExp.$3, bytes: RegExp.$4 },
                          //        data: { command: RegExp.$1, key: RegExp.$2, exptime: RegExp.$3, bytes: RegExp.$4 },
                          //        //datatype: ''.
                          //        cache: false,
                          //    }).done(function(res){
                          //        this.setState({result: res})
                          //    }.bind(this)).fail(function(){
                          //        this.setState({result: 'API Request was failed '})
                          //    }.bind(this));
                          //    break;


                          // PUT =========================================================================
                          case /^(release|recover)$/.test(e.target.value) :
                              $.ajax({
                                  url: "../",
                                  type: 'PUT',
                                  data: {command: RegExp.$1},
                                  //datatype: ''.
                                  cache: false,
                              }).done(function(res){
                                  this.setState({result: res})
                              }.bind(this)).fail(function(){
                                  this.setState({result: 'API Request was failed '})
                              }.bind(this));
                              break;

                          case /^(set_lost_action|set_log_level)\s(.+)$/.test(e.target.value) :
                              $.ajax({
                                  url: "../",
                                  type: 'PUT',
                                  data: {command: RegExp.$1, level: RegExp.$2, lost: RegExp.$2},
                                  //datatype: ''.
                                  cache: false,
                              }).done(function(res){
                                  this.setState({result: res})
                              }.bind(this)).fail(function(){
                                  this.setState({result: 'API Request was failed '})
                              }.bind(this));
                              break;

                          case /^(set_auto_recover)\s([a-z]+)\s*([0-9]*)$/.test(e.target.value) :
                              $.ajax({
                                  url: "../",
                                  type: 'PUT',
                                  data: {command: RegExp.$1, bool: RegExp.$2, sec: RegExp.$3},
                                  //datatype: ''.
                                  cache: false,
                              }).done(function(res){
                                  this.setState({result: res})
                              }.bind(this)).fail(function(){
                                  this.setState({result: 'API Request was failed '})
                              }.bind(this));
                              break;


                          // Same Command Again=========================================================================
                          //case '!!':
                          //    this.setState({cmd: "please input command"});
                          //        this.setState({result: ''});
                          //    break;

                          // No Command =========================================================================
                          case '':
                              this.setState({cmd: "please input command"});
                                  this.setState({result: ''});
                              break;

                          // Not supported yet on virtual console =========================================================================
                          default:
                              this.setState({cmd: "Not Supported"});
                              this.setState({result: ''});
                              break;
                      }
                  }
              },
              render() {
                return (
                  <div>
                    <div>
                      Send Command is {this.state.cmd}
                    </div>
                    <p> {this.state.explanation} </p>
                    <input type="text" placeholder={this.state.cmd} onChange={this.changeText}  onKeyDown={this.sendCommand} />
                    <div>
                      result is<br />
                      {this.state.result}
                    </div>
                  </div>
                );
              }
          }
      );
      
      
      React.render(<Test />, document.getElementById("reactArea"));

    </script>

  </body>
</html>
